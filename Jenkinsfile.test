podTemplate(label: 'jenkins-agent', cloud: 'kubernetes', serviceAccount: 'jenkins-admin',
  containers: [
    containerTemplate(name: 'python3',  image: 'localhost:32000/python:latest',   ttyEnabled: true, command: 'cat'),
    containerTemplate(name: 'buildkit', image: 'localhost:32000/buildkit:latest', ttyEnabled: true, privileged: true),
  ],
  volumes: [
    secretVolume(mountPath: '/etc/.ssh', secretName: 'ssh-home')
  ],
  envVars: [
    envVar(key: 'tag',        value: 'registry'),
    envVar(key: 'repository', value: '172.17.5.224:32000'),
    envVar(key: 'namespace',  value: 'default'),
  ]
) {
    node('jenkins-agent') {
        stage('Prepare'){
            checkout scm
        }
        stage('Test') {
            container('python3') {
                dir('/home/jenkins/agent/workspace/MicroServiceMatrix') {
                    sh ''' 
                        echo $tag $repository $namespace
                        export PROD=1
                        python3 -m venv .
                        . bin/activate
                        pip install pylint pylint-venv pytest requests dekeyrej-kube
                        git config --global --add safe.directory /home/jenkins/agent/workspace/MicroServiceMatrix
                        python3 determine_tags.py
                    '''
                    stash(name: 'builds', includes: '*.py, Dockerfile, *.txt, *.awk, *.sh')
                    milestone(1)
                }
            }
        }
        stage('Build Docker Image') {
            container('buildkit') {

                sh '''
                    echo $tag $repository $namespace
                    pwd
                    ls -al
                    chmod a+x build.sh
                    build.sh
                '''
                milestone(2)
            }
        }
        stage('Deploy Latest') {
            container('python3') {
                sh '''
                    echo $tag $repository $namespace
                    chmod a+x deploy.sh
                    deploy.sh
                '''
                milestone(3)
            }
        }
        stage('Cleanup') {
            container('python3') {
                sh '''
                    echo $tag $repository $namespace
                    chmod a+x cleanup.sh
                    cleanup.sh
                '''
                milestone(4)
            }
        }
    }
}

properties([[
    $class: 'BuildDiscarderProperty',
    strategy: [
        $class: 'LogRotator',
        artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '10', numToKeepStr: '2']
    ]
]);
