tag="registry"
repository="192.168.86.49:32000"
namespace="default"

podTemplate(label: 'jenkins-agent', cloud: 'kubernetes', serviceAccount: 'jenkins-admin',
  containers: [
    containerTemplate(name: 'python3',  image: 'python:slim',          ttyEnabled: true, command: 'cat'),
    containerTemplate(name: 'buildkit', image: 'moby/buildkit:master', ttyEnabled: true, privileged: true),
    containerTemplate(name: 'kubectl',  image: 'roffe/kubectl',        ttyEnabled: true, command: 'cat'),
  ],
  volumes: [
    secretVolume(mountPath: '/etc/.ssh', secretName: 'ssh-home')
  ]
) {
    node('jenkins-agent') {
        stage('Prepare'){
            checkout scm
        }
        stage('Test') {
            container('python3') {
                sh """ 
                    apt update
                    apt install git -y
                    python3 -m venv .
                    . bin/activate
                    pip install pylint pylint-venv pytest arrow requests
                    pip install -r requirements-wpd.txt
                    python3 -m pylint --fail-under 8.0 *.py
                    python3 -m compileall *.py
                    git config --global --add safe.directory /home/jenkins/agent/workspace/CloudMicroServiceMatrix
                    python3 determine_tags.py
                """
                stash(name: 'builds', includes: 'builds.txt')
                milestone(1)
            }
        }
        stage('Build Docker Image') {
            container('buildkit') {
                sh """
                    adduser -D -u 1000 jenkins
                    chown -R jenkins:jenkins /home/jenkins/agent
                    chdir /home/jenkins/agent/workspace/CloudMicroServiceMatrix
                    pwd
                    ls -al
                    cat builds.txt
                    echo "After the cat, and before the loop"
                    for i in `cat builds.txt` 
                    do 
                        buildctl build --frontend dockerfile.v0 --local context=. --local dockerfile=. --opt filename=Dockerfile.${i} --output type=image,name=${repository}/${i}:${tag},push=true
                    done
                """
                milestone(2)
            }
        }
        stage('Deploy Latest') {
            container('kubectl') {
                unstash(name: 'builds')
                sh """
                    for i in `cat builds.txt`
                    do
                        kubectl get replicaset -l k8s-app=$i -o jsonpath='{.items[0].metadata.name}' > replicaset.${i}
                        kubectl rollout restart -n ${namespace} deployment $i
                        sleep 5
                        kubectl delete replicaset `cat replicaset.${i}`
                    done
                """
                milestone(3)
            }
        }
    }
}

properties([[
    $class: 'BuildDiscarderProperty',
    strategy: [
        $class: 'LogRotator',
        artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10']
    ]
]);
