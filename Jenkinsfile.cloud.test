podTemplate(label: 'jenkins-agent', cloud: 'kubernetes', serviceAccount: 'jenkins-admin',
  containers: [
    containerTemplate(name: 'python3',  image: 'localhost:32000/python:08292023',   ttyEnabled: true, command: 'cat'),
    containerTemplate(name: 'buildkit', image: 'localhost:32000/buildkit:08292023', ttyEnabled: true, privileged: true),
  ],
  volumes: [
    secretVolume(mountPath: '/etc/.ssh', secretName: 'ssh-home')
  ],
  envVars: [
    envVar(key: 'tag', value: 'registry'),
    envVar(key: 'repository', value: '172.17.5.224:32000'),
    envVar(key: 'namespace', value: 'default'),
  ]
) {
    node('jenkins-agent') {
        stage('Prepare'){
            checkout scm
        }
        stage('Test') {
            container('python3') {
                sh ''' 
                    export PROD=1
                    python3 -m venv .
                    . bin/activate
                    pip install pylint pylint-venv pytest
                    pip install -r requirements.txt
                    pip install -r requirements-pandas.txt
                    python3 -m pylint --fail-under 9.0 *.py
                    git config --global --add safe.directory /home/jenkins/agent/workspace/CloudMicroServiceMatrix
                    python3 determine_tags.py
                '''
                stash(name: 'builds', includes: '*.py, Dockerfile.*, *.txt')
                milestone(1)
            }
        }
        stage('Build Docker Image') {
            container('buildkit') {
                dir('/home/jenkins/agent/workspace/CloudMicroServiceMatrix') {
                    unstash(name: 'builds')
                    if (fileExists('builds.txt')) {
                        echo "File builds.txt found!"
                        sh '''
                            if [ `stat -c %s builds.txt` -gt 0 ]
                            then 
                                for i in `cat builds.txt` 
                                do 
                                    if [ $i = \'aqi\' ]; then pandas=True; else pandas=False; fi 
                                    buildctl build --frontend dockerfile.v0 --local context=. --local dockerfile=. --opt build-arg:MICROSERVICE=${i} --opt build-arg:PANDAS=${pandas} --output type=image,name=${repository}/${i}:${tag},registry.insecure=true,push=true
                                done 
                            fi
                        '''
                    }
                }
                milestone(2)
            }
        }
        stage('Deploy Latest') {
            container('python3') {
                if (fileExists('builds.txt')) {
                    echo "File builds.txt found!"
                    sh '''
                            if [ `stat -c %s builds.txt` -gt 0 ] 
                            then 
                                for i in `cat builds.txt` 
                                do 
                                    kubectl rollout restart deployment -n ${namespace} $i
                                    sleep 5
                                done 
                            fi
                        '''
                }
                milestone(3)
            }
        }
        stage('Cleanup') {
            container('python3') {
                sh '''
                kubectl get replicasets -n default -o wide > repsets
                awk \'{if ($2 == 0 && $3 == 0){print $1} }\' repsets > emptyrepsets
                for i in `cat emptyrepsets`
                do 
                    kubectl delete replicaset -n default $i
                done
                '''
                milestone(4)
            }
        }
    }
}

properties([[
    $class: 'BuildDiscarderProperty',
    strategy: [
        $class: 'LogRotator',
        artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '10', numToKeepStr: '2']
    ]
]);
